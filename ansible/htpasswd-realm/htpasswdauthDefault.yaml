- name: Get K8S_AUTH_TOKEN with kubeadmin login
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars.yml  # Load variables from vars.yml

  module_defaults:
    group/community.okd.okd:
      host: "https://api.{{ cluster_name }}.k8sop-{{ workspace }}.system-a.local:6443"
      validate_certs: false  # Disable certificate validation

  tasks:
    # Read the kubeadmin password from a file
    - name: Read kubeadmin password from file
      shell: cat "{{ kubeadmin_password_file }}"
      register: kubeadmin_password_content
      changed_when: false

    # Set the kubeadmin_password variable and prevent logging
    - name: Set kubeadmin_password variable
      set_fact:
        kubeadmin_password: "{{ kubeadmin_password_content.stdout }}"
      no_log: true

    # Get K8S_AUTH_TOKEN using kubeadmin credentials
    - name: Get K8S_AUTH_TOKEN
      community.okd.openshift_auth:
        username: kubeadmin
        password: "{{ kubeadmin_password }}"
        validate_certs: false
      register: k8s_auth_token

    # Generate a random password for localadmin
    - name: Generate passwords
      set_fact:
        localadmin_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,length=16') }}"
      no_log: true

    # Add localadmin to an Htpasswd file
    - name: Add localadmin to a password file and ensure permissions are set
      community.general.htpasswd:
        path: /tmp/htpasswd_file
        name: localadmin
        password: "{{ localadmin_password }}"
        mode: 0640

    # Create htpasswd secret payload YAML file
    - name: Create htpasswd secret payload YAML file
      copy:
        content: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: htpasswd-secret
            namespace: openshift-config
          stringData:
            htpasswd: "{{ lookup('file', '/tmp/htpasswd_file') }}"
        dest: "/tmp/htpasswd_secret_payload.yaml"

    # Apply htpasswd secret from YAML
    - name: Apply htpasswd secret from YAML
      kubernetes.core.k8s:
        apply: true
        api_key: "{{ k8s_auth_token.openshift_auth.api_key }}"
        src: /tmp/htpasswd_secret_payload.yaml
        state: present
      register: secret_result

    # Create identity provider payload YAML file
    - name: Create identity provider payload YAML file
      copy:
        content: |
          apiVersion: config.openshift.io/v1
          kind: OAuth
          metadata:
            name: cluster
          spec:
            identityProviders:
            - name: LocalAuth
              mappingMethod: claim
              type: HTPasswd
              htpasswd:
                fileData:
                  name: htpasswd-secret
            - ldap:
                attributes:
                  email:
                  - mail
                  id:
                  - sAMAccountName
                  name:
                  - cn
                  preferredUsername:
                  - sAMAccountName
                bindDN: ZA-SVC-OCP-REF
                bindPassword:
                  name: ldap-secret
                ca:
                  name: ca-bundle
                insecure: false
                url: ldaps://ad-ldaptest.system-a.local:636/DC=system-a,DC=local?sAMAccountName?sub?(&(objectclass=person)(|(memberOf:1.2.840.113556.1.4.1941:=CN=SI-LS-ADM-OPENSHIFT-LOGIN,OU=Funktionen,OU=Gruppen,OU=Administration,OU=Signal-Iduna,DC=system-a,DC=local)))
              mappingMethod: claim
              name: ldapidp
              type: LDAP
        dest: "/tmp/identity_provider_payload.yaml"

    # Apply identity provider from YAML
    - name: Apply identity provider from YAML
      kubernetes.core.k8s:
        apply: true
        api_key: "{{ k8s_auth_token.openshift_auth.api_key }}"
        src: /tmp/identity_provider_payload.yaml
        state: present
      register: identity_provider_result

    # Create cluster-admin role binding for localadmin payload YAML file
    - name: Create cluster-admin role binding for localadmin payload YAML file
      copy:
        content: |
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: localadmin-cluster-admin
          namespace: default
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
            - kind: User
              apiGroup: rbac.authorization.k8s.io
              name: localadmin
        dest: "/tmp/cluster_role_binding_payload_localadmin.yaml"

    # Apply Cluster Role Binding from YAML
    - name: Apply Cluster Role Binding from YAML
      kubernetes.core.k8s:
        apply: true
        api_key: "{{ k8s_auth_token.openshift_auth.api_key }}"
        src: /tmp/cluster_role_binding_payload_localadmin.yaml
        state: present
      register: cluster_role_binding_localadmin_result

    # Store the generated localadmin password in a file
    - name: Store the generated localadmin password in a file
      copy:
        content: "{{ localadmin_password }}"
        dest: "{{ localadmin_password_file }}"

    # Display generated passwords
    - name: Display generated passwords
      debug:
        msg: "Generated passwords: localadmin={{ localadmin_password }}"

    # Create ServiceAccount
    - name: Create ServiceAccount
      kubernetes.core.k8s:
        apply: true
        validate_certs: false
        api_key: "{{ k8s_auth_token.openshift_auth.api_key }}"
        api_version: v1
        apply: true
        kind: ServiceAccount
        name: cluster-admin-account
        namespace: default
        state: present
      register: serviceaccount_info

    # Create cluster-admin role binding for ServiceAccount payload YAML file
    - name: Create cluster-admin role binding for ServiceAccount payload YAML file
      copy:
        content: |
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: cluster-admin-account
          subjects:
            - kind: ServiceAccount
              name: cluster-admin-account
              namespace: default
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
        dest: "/tmp/cluster_role_binding_payload_serviceaccount.yaml"

    # Apply Cluster Role Binding for ServiceAccount from YAML
    - name: Apply Cluster Role Binding for ServiceAccount from YAML
      kubernetes.core.k8s:
        apply: true
        api_key: "{{ k8s_auth_token.openshift_auth.api_key }}"
        src: /tmp/cluster_role_binding_payload_serviceaccount.yaml
        state: present
      register: cluster_role_binding_serviceaccount_result

    # Debug secrets.name from serviceaccount_info
    - name: Debug secrets.name from serviceaccount_info
      debug:
        msg: "{{ serviceaccount_info }}"

    # Extract secrets.name from serviceaccount_info
    - name: Extract secrets.name from serviceaccount_info
      set_fact:
        serviceaccount_secret_name: "{{ serviceaccount_info['result']['imagePullSecrets'][0]['name'] }}"

    # Get ServiceAccount secret
    - name: Get ServiceAccount secret
      kubernetes.core.k8s_info:
        validate_certs: false
        api_key: "{{ k8s_auth_token.openshift_auth.api_key }}"
        api_version: v1
        kind: Secret
        name: "{{ serviceaccount_secret_name }}"
        namespace: default
      register: sa_secret_info

    # Store the generated authentication token in a variable
    - name: Store the generated authentication token in a variable
      set_fact:
        sa_secret_info_data: "{{ sa_secret_info['resources'][0]['metadata']['annotations']['openshift.io/token-secret.value'] }}"

    # Decode and store the generated authentication token in a file
    - name: Decode and store the generated authentication token in a file
      copy:
        content: "{{ sa_secret_info_data }}"
        dest: "{{ serviceaccount_password_file }}"
